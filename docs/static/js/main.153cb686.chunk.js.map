{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/UseFecthGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cate","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","UseFecthGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAEaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAqB5C,OAEI,sBAAMC,SAdW,SAACC,GAEjBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAEvBR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAOtB,SACI,uBACCO,KAAK,OACLC,MAAOT,EACPU,SAvBiB,SAACP,GAEtBF,EAAcE,EAAEQ,OAAOF,a,+BCRnBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,0DAE6CC,UAAUH,GAFvD,sDAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIKA,EAAKC,OAJV,uBAIXC,EAJW,EAIXA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CAEFC,GAAGD,EAAIC,GACPC,MAAMF,EAAIE,MACVV,IAAG,UAACQ,EAAIG,cAAL,aAAC,EAAYC,iBAAiBZ,QAVvB,kBAcdM,GAdc,4CAAH,sDCEPO,EAAc,SAAC,GAAmB,IAAlBH,EAAiB,EAAjBA,MAAQV,EAAS,EAATA,IAGjC,OACI,sBAAKc,UAAU,+CAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IAChB,4BAAIA,QCJPO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECDX,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAE7BqB,KAAM,GACNa,SAAQ,IAL0B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAqBxC,OAbAC,qBAAU,WAETxB,EAAQC,GAAUwB,MAAK,SAAAC,GAElBH,EAAS,CAEJf,KAAKkB,EACLL,SAAQ,SAIhB,IAEIC,EDjB2BK,CAAc1B,GAAnCa,EAHsB,EAG3BN,KAAca,EAHa,EAGbA,QAEtB,OACI,qCAEA,6BAAKpB,IAEJoB,GAAW,wCAEZ,qBAAKJ,UAAU,YAAf,SAIYH,EAAOJ,KAAI,SAACC,GAAD,OAEX,cAAC,EAAD,eAEKA,GADAA,EAAIC,aEgBbgB,EAlCM,WAAO,IAAD,EAGczC,mBAAS,CAAC,gBAHxB,mBAGf0C,EAHe,KAGH3C,EAHG,KAWtB,OACE,qCACA,8CACC,cAAC,EAAD,CAAaA,cAAeA,IAC7B,uBAEA,6BAEQ2C,EAAWnB,KAAI,SAAAT,GAAQ,OACjB,cAAC,EAAD,CAEAA,SAAYA,GADPA,Y,MCpB3B6B,IAASC,OAAO,cAAC,EAAD,IAAiBC,SAASC,eAAe,W","file":"static/js/main.153cb686.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    \r\n    const [inputValue, setInputValue] = useState(\"\")\r\n\r\n    const handleInputChange = (e) =>{\r\n\r\n         setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n\r\n         e.preventDefault();\r\n\r\n         if(inputValue.trim().length > 2 ){\r\n\r\n                setCategories(cate => [inputValue, ...cate])   \r\n                setInputValue(\"\")\r\n\r\n         }\r\n    }\r\n    \r\n    return (\r\n        \r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n             type=\"text\"\r\n             value={inputValue}\r\n             onChange={handleInputChange}\r\n            ></input>\r\n            </form>\r\n        \r\n    )\r\n}\r\n","export const getGifs = async(category) =>{\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?limit=10&q=${ encodeURI(category) }&api_key=8zBQm2RYBgaGXZNa0J3Ngxn1uEtfi4JB`\r\n    const resp = await fetch(url);\r\n    const { data }  = await resp.json()\r\n    const gifs = data.map(img => {  \r\n        return {\r\n\r\n             id:img.id,\r\n             title:img.title,\r\n             url:img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n  return gifs   \r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({title , url}) => {\r\n\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__bounceInDown\">\r\n            <img src={url} alt={title} />\r\n                <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { UseFecthGifs } from '../hooks/UseFecthGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n    \r\n\r\n    const { data:images , loading } = UseFecthGifs( category )\r\n    \r\n    return (\r\n        <>\r\n\r\n        <h3>{category}</h3>\r\n\r\n        {loading && <p>Loading</p>}\r\n\r\n        <div className=\"card-grid\">\r\n    \r\n                {\r\n\r\n                    images.map((img) =>(\r\n\r\n                    <GifGridItem \r\n                    key={img.id} \r\n                     {...img}\r\n                     />\r\n\r\n                    ))                    \r\n\r\n                    }\r\n            \r\n        </div> \r\n        </>\r\n    )\r\n}\r\n\r\n/*key = 8zBQm2RYBgaGXZNa0J3Ngxn1uEtfi4JB*/","import React, { useEffect, useState } from 'react'\r\nimport {getGifs} from \"../helpers/getGifs\"\r\n\r\nexport const UseFecthGifs = ( category ) => {\r\n    \r\n    const [state, setState] = useState({\r\n\r\n          data: [],\r\n          loading:true\r\n    })\r\n      \r\n    useEffect(() => {\r\n   \r\n     getGifs(category).then(imgs => {\r\n\r\n          setState({\r\n\r\n               data:imgs,\r\n               loading:false\r\n          })\r\n     })\r\n         \r\n    }, [ ])\r\n\r\n    return state; \r\n}\r\n","\r\nimport React, {useState} from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n const GifExpertApp = () => {\r\n      \r\n\r\n      const [categories, setCategories] = useState([\"Jotaro Kujo\"])\r\n\r\n     /* const handleAdd = () =>{ \r\n\r\n         setCategories([ ...categories,\"HunterxHunter\"])\r\n\r\n      }*/\r\n\r\n      return(\r\n        <>\r\n        <h2>GifExpertApp</h2>\r\n         <AddCategory setCategories={setCategories} />\r\n        <hr />\r\n  \r\n        <ol>\r\n            {\r\n                categories.map(category => (\r\n                      <GifGrid\r\n                      key={category} \r\n                      category = {category}/>\r\n                ))\r\n\r\n                }\r\n\r\n        </ol>\r\n\r\n        </>\r\n        \r\n  ) \r\n }\r\n\r\n export default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(<GifExpertApp />,document.getElementById('root'));\n\n"],"sourceRoot":""}